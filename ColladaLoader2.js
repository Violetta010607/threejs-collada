// Generated by CoffeeScript 1.3.3
var ColladaAsset, ColladaEffect, ColladaEffectSampler, ColladaEffectSurface, ColladaFile, ColladaImage, ColladaLoader2, ColladaMaterial,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ColladaFile = (function() {

  function ColladaFile() {
    this.url = null;
    this.baseUrl = null;
    this.dae = {};
    this.dae.libEffects = {};
    this.dae.libMaterials = {};
    this.dae.libGeometries = {};
    this.dae.libControllers = {};
    this.dae.libLights = {};
    this.dae.libImages = {};
    this.dae.libScenes = {};
    this.dae.libAnimations = {};
  }

  ColladaFile.prototype.findElementByUrl = function(lib, url) {
    var id;
    if (lib[url] != null) {
      return lib[url];
    }
    if (url.charAt(0) === "#") {
      id = url.substr(1, url.length - 1);
      if (lib[id] != null) {
        return lib[id];
      }
    }
    return null;
  };

  ColladaFile.prototype.setUrl = function(url) {
    var parts, _ref;
    if (url != null) {
      this.url = url;
      parts = url.split("/");
      parts.pop();
      return this.baseUrl = ((_ref = parts.length < 1) != null ? _ref : {
        ".": parts.join("/")
      }) + "/";
    } else {
      this.url = null;
      return this.baseUrl = null;
    }
  };

  return ColladaFile;

})();

ColladaAsset = (function() {

  function ColladaAsset() {
    this.unit = 1;
    this.upAxis = "Z";
  }

  return ColladaAsset;

})();

ColladaImage = (function() {

  function ColladaImage() {
    this.id = null;
    this.init_from = null;
  }

  return ColladaImage;

})();

ColladaEffect = (function() {

  function ColladaEffect() {
    this.id = null;
    this.shading = null;
    this.surfaces = {};
    this.samplers = {};
  }

  ColladaEffect.prototype.link = function(file, log) {
    var id, sampler, surface, _ref, _ref1, _results;
    _ref = this.surfaces;
    for (id in _ref) {
      surface = _ref[id];
      surface.link(file, this, log);
    }
    _ref1 = this.samplers;
    _results = [];
    for (id in _ref1) {
      sampler = _ref1[id];
      _results.push(sampler.link(file, this, log));
    }
    return _results;
  };

  return ColladaEffect;

})();

ColladaEffectSurface = (function() {

  function ColladaEffectSurface() {
    this.sid = null;
    this.type = null;
    this.initFrom_url = null;
    this.initFrom = null;
  }

  ColladaEffectSurface.prototype.link = function(file, effect, log) {
    this.initFrom = file.findElementByUrl(file.dae.libImages, this.initFrom_url);
    if (!(this.initFrom != null)) {
      log("Could not link image " + this.initFrom_url + " for effect surface " + this.sid, ColladaLoader2.messageError);
    }
  };

  return ColladaEffectSurface;

})();

ColladaEffectSampler = (function() {

  function ColladaEffectSampler() {
    this.sid = null;
    this.surface_sid = null;
    this.surface = null;
    this.image_url = null;
    this.image = null;
  }

  ColladaEffectSampler.prototype.link = function(file, effect, log) {
    if (this.image_url != null) {
      this.image = file.findElementByUrl(file.dae.libImages, this.image_url);
      if (!(this.image != null)) {
        log("Could not link image " + this.init_from_url + " for effect sampler " + this.sid, ColladaLoader2.messageError);
      }
    } else if (this.surface_sid != null) {
      this.surface = effect.surfaces[this.surface_sid];
      if (!(this.surface != null)) {
        log("Could not link surface " + this.surface_sid + " for effect sampler " + this.sid, ColladaLoader2.messageError);
      }
      this.image = this.surface.initFrom;
    }
  };

  return ColladaEffectSampler;

})();

ColladaMaterial = (function() {

  function ColladaMaterial() {
    this.id = null;
    this.name = null;
    this.effect = null;
    this.effect_url = null;
  }

  ColladaMaterial.prototype.link = function(file, log) {
    this.effect = file.findElementByUrl(file.dae.libEffects, this.effect_url);
    if (!(this.effect != null)) {
      log("Could not link effect " + this.effect_url + " for material " + this.id, ColladaLoader2.messageError);
    }
  };

  return ColladaMaterial;

})();

ColladaLoader2 = (function() {

  ColladaLoader2.messageTrace = 0;

  ColladaLoader2.messageInfo = 1;

  ColladaLoader2.messageWarning = 2;

  ColladaLoader2.messageError = 3;

  ColladaLoader2.messageTypes = ["TRACE", "INFO", "WARNING", "ERROR"];

  function ColladaLoader2() {
    this._parseLibAnimation = __bind(this._parseLibAnimation, this);

    this._parseLibScene = __bind(this._parseLibScene, this);

    this._parseLibImage = __bind(this._parseLibImage, this);

    this._parseLibLight = __bind(this._parseLibLight, this);

    this._parseLibController = __bind(this._parseLibController, this);

    this._parseLibGeometry = __bind(this._parseLibGeometry, this);

    this._parseLibMaterial = __bind(this._parseLibMaterial, this);

    this._parseLibEffect = __bind(this._parseLibEffect, this);
    this.log = this.logConsole;
    this.readyCallback = null;
    this.progressCallback = null;
    this.file = null;
    this.upConversion = null;
    this.options = {
      centerGeometry: false,
      convertUpAxis: false,
      subdivideFaces: true,
      upAxis: "Y"
    };
  }

  ColladaLoader2.logConsole = function(msg, type) {
    console.log("ColladaLoader2 " + ColladaLoader2.messageTypes[type] + ": " + msg);
  };

  ColladaLoader2.prototype.setLog = function(logCallback) {
    this.log = logCallback || this.logConsole;
  };

  ColladaLoader2.prototype.load = function(url, readyCallback, progressCallback) {
    var length, req;
    this.readyCallback = readyCallback;
    length = 0;
    if (document.implementation && document.implementation.createDocument) {
      req = new XMLHttpRequest();
      if (req.overrideMimeType) {
        req.overrideMimeType("text/xml");
      }
      req.onreadystatechange = function() {
        if (req.readyState === 4) {
          if (req.status === 0 || req.status === 200) {
            if (req.responseXML) {
              return this.parse(req.responseXML, readyCallback, url);
            } else {
              return this.log("Empty or non-existing file " + url + ".", ColladaLoader2.messageError);
            }
          }
        } else if (req.readyState === 3) {
          if (progressCallback) {
            if (length === 0) {
              length = req.getResponseHeader("Content-Length");
            }
            return progressCallback({
              total: length,
              loaded: req.responseText.length
            });
          }
        }
      };
      req.open("GET", url, true);
      req.send(null);
    } else {
      this.log("Don't know how to parse XML!", ColladaLoader2.messageError);
    }
  };

  ColladaLoader2.prototype.parse = function(doc, readyCallback, url) {
    var result;
    this.readyCallback = readyCallback;
    this.file = new ColladaFile;
    this.file.setUrl(url);
    this._parseDocument(doc);
    this._resolveLinks();
    result = this.file;
    this.file = null;
    if (this.readyCallback) {
      this.readyCallback(result);
    }
    return result;
  };

  ColladaLoader2.prototype._parseDocument = function(doc) {
    var child, colladaElement, _i, _len, _ref, _ref1, _ref2, _results;
    if (((_ref = doc.childNodes[0]) != null ? (_ref1 = _ref.nodeName) != null ? _ref1.toUpperCase() : void 0 : void 0) === "COLLADA") {
      colladaElement = doc.childNodes[0];
      _ref2 = colladaElement.childNodes;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        if (child.nodeType === 1) {
          _results.push(this._parseTopLevelElement(child));
        }
      }
      return _results;
    } else {
      return this.log("Can not parse document, top level element is not <COLLADA>", ColladaLoader2.messageError);
    }
  };

  ColladaLoader2.prototype._parseChildElements = function(el, fun) {
    var child, _i, _len, _ref;
    _ref = el.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.nodeType === 1) {
        fun(child);
      }
    }
  };

  ColladaLoader2.prototype._getFirstChildByName = function(el, name) {
    var child, _i, _len, _ref;
    _ref = el.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.nodeType === 1 && child.nodeName === name) {
        return child;
      }
    }
    return null;
  };

  ColladaLoader2.prototype._parseTopLevelElement = function(el) {
    var child, _i, _len, _ref;
    switch (el.nodeName) {
      case "asset":
        this._parseAsset(el);
        break;
      case "scene":
        _ref = el.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          this._parseScene(child);
        }
        break;
      case "library_effects":
        this._parseChildElements(el, this._parseLibEffect);
        break;
      case "library_materials":
        this._parseChildElements(el, this._parseLibMaterial);
        break;
      case "library_geometries":
        this._parseChildElements(el, this._parseLibGeometry);
        break;
      case "library_controllers":
        this._parseChildElements(el, this._parseLibController);
        break;
      case "library_lights":
        this._parseChildElements(el, this._parseLibLight);
        break;
      case "library_images":
        this._parseChildElements(el, this._parseLibImage);
        break;
      case "library_visual_scenes":
        this._parseChildElements(el, this._parseLibScene);
        break;
      case "library_animations":
        this._parseChildElements(el, this._parseLibAnimation);
        break;
      default:
        this.log("Skipped unknown DAE element " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseAsset = function(el) {
    var asset, child, _i, _len, _ref;
    this.log("Parsing asset.", ColladaLoader2.messageTrace);
    asset = new ColladaAsset;
    _ref = el.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.nodeType === 1) {
        this._parseAssetChild(asset, child);
      }
    }
    this.upConversion = this._getUpConversion(asset.upAxis, this.options.upAxis);
    this.file.dae.asset = asset;
  };

  ColladaLoader2.prototype._parseAssetChild = function(asset, el) {
    var meter;
    switch (el.nodeName) {
      case "unit":
        meter = el.getAttribute("meter");
        if (meter != null) {
          asset.unit = parseFloat(meter);
        }
        break;
      case "up_axis":
        asset.upAxis = el.textContent.toUpperCase().charAt(0);
        break;
      default:
        this.log("Skipped unknown asset property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._getUpConversion = function(axisSrc, axisDest) {
    var _ref, _ref1, _ref2;
    if (!this.options.convertUpAxis || axisSrc === axisDest) {
      return null;
    } else {
      switch (axisSrc) {
        case "X":
          return (_ref = axisDest === "Y") != null ? _ref : {
            "XtoY": "XtoZ"
          };
        case "Y":
          return (_ref1 = axisDest === "X") != null ? _ref1 : {
            "YtoX": "YtoZ"
          };
        case "Z":
          return (_ref2 = axisDest === "X") != null ? _ref2 : {
            "ZtoX": "ZtoY"
          };
      }
    }
  };

  ColladaLoader2.prototype._parseScene = function(el) {
    return this.log("Parsing scene.", ColladaLoader2.messageTrace);
  };

  ColladaLoader2.prototype._parseLibEffect = function(el) {
    var child, effect, profileCommon, _i, _len, _ref;
    this.log("Parsing effect.", ColladaLoader2.messageTrace);
    effect = new ColladaEffect;
    effect.id = el.getAttribute("id");
    profileCommon = this._getFirstChildByName(el, "profile_COMMON");
    if (profileCommon != null) {
      _ref = profileCommon.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.nodeType === 1) {
          this._parseLibEffectProfileChild(effect, child);
        }
      }
    } else {
      this.log("Effect " + effect.id + " has no common profile", ColladaLoader2.messageError);
    }
    this.file.dae.libEffects[effect.id] = effect;
  };

  ColladaLoader2.prototype._parseLibEffectProfileChild = function(effect, el) {
    var child, sid, _i, _j, _len, _len1, _ref, _ref1;
    sid = el.getAttribute("sid");
    switch (el.nodeName) {
      case "newparam":
        _ref = el.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.nodeType === 1) {
            this._parseLibEffectNewparamChild(effect, sid, child);
          }
        }
        break;
      case "technique":
        _ref1 = el.childNodes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          if (child.nodeType === 1) {
            this._parseLibEffectTechniqueChild(effect, sid, child);
          }
        }
        break;
      default:
        this.log("Skipped unknown profile_COMMON property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibEffectNewparamChild = function(effect, sid, el) {
    var child, sampler, surface, _i, _j, _len, _len1, _ref, _ref1;
    switch (el.nodeName) {
      case "surface":
        surface = new ColladaEffectSurface;
        surface.type = el.getAttribute("type");
        surface.sid = sid;
        _ref = el.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.nodeType === 1) {
            this._parseLibEffectSurfaceChild(effect, surface, sid, child);
          }
        }
        effect.surfaces[sid] = surface;
        break;
      case "sampler2D":
        sampler = new ColladaEffectSampler;
        sampler.sid = sid;
        _ref1 = el.childNodes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          if (child.nodeType === 1) {
            this._parseLibEffectSamplerChild(effect, sampler, sid, child);
          }
        }
        effect.samplers[sid] = sampler;
        break;
      default:
        this.log("Skipped unknown newparam property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibEffectSurfaceChild = function(effect, surface, sid, el) {
    switch (el.nodeName) {
      case "init_from":
        surface.initFrom_url = el.textContent;
        break;
      default:
        this.log("Skipped unknown surface property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibEffectSamplerChild = function(effect, sampler, sid, el) {
    switch (el.nodeName) {
      case "source":
        sampler.surface_sid = el.textContent;
        break;
      case "instance_image":
        sampler.image_url = el.getAttribute("url");
        break;
      default:
        this.log("Skipped unknown sampler property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibEffectTechniqueChild = function(effect, sid, el) {
    var child, profile, technique, _i, _j, _len, _len1, _ref, _ref1;
    switch (el.nodeName) {
      case "blinn":
      case "phong":
      case "lambert":
      case "constant":
        effect.shading = el.nodeName;
        _ref = el.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.nodeType === 1) {
            this._parseTechniqueParam(effect, "", child);
          }
        }
        break;
      case "extra":
        technique = this._getFirstChildByName(el, "technique");
        if (technique != null) {
          profile = technique.getAttribute("profile");
          _ref1 = technique.childNodes;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            child = _ref1[_j];
            if (child.nodeType === 1) {
              this._parseTechniqueParam(effect, profile, child);
            }
          }
        }
        break;
      default:
        this.log("Skipped unknown technique property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseTechniqueParam = function(effect, profile, el) {
    switch (el.nodeName) {
      case "emission":
        break;
      case "ambient":
        break;
      case "diffuse":
        break;
      case "specular":
        break;
      case "shininess":
        break;
      case "reflective":
        break;
      case "reflectivity":
        break;
      case "transparent":
        break;
      case "transparency":
        break;
      case "index_of_refraction":
        break;
      default:
        this.log("Skipped unknown technique shading property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibMaterial = function(el) {
    var child, material, _i, _len, _ref;
    this.log("Parsing material.", ColladaLoader2.messageTrace);
    material = new ColladaMaterial;
    material.id = el.getAttribute("id");
    material.name = el.getAttribute("name");
    _ref = el.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.nodeType === 1) {
        this._parseLibMaterialChild(material, child);
      }
    }
    this.file.dae.libMaterials[material.id] = material;
  };

  ColladaLoader2.prototype._parseLibMaterialChild = function(material, el) {
    switch (el.nodeName) {
      case "instance_effect":
        material.effect_url = el.getAttribute("url");
        break;
      default:
        this.log("Skipped unknown material property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibGeometry = function(el) {
    return this.log("Parsing geometry.", ColladaLoader2.messageTrace);
  };

  ColladaLoader2.prototype._parseLibController = function(el) {
    return this.log("Parsing controller.", ColladaLoader2.messageTrace);
  };

  ColladaLoader2.prototype._parseLibLight = function(el) {
    return this.log("Parsing light.", ColladaLoader2.messageTrace);
  };

  ColladaLoader2.prototype._parseLibImage = function(el) {
    var child, image, _i, _len, _ref;
    this.log("Parsing image.", ColladaLoader2.messageTrace);
    image = new ColladaImage;
    image.id = el.getAttribute("id");
    _ref = el.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.nodeType === 1) {
        this._parseLibImageChild(image, child);
      }
    }
    this.file.dae.libImages[image.id] = image;
  };

  ColladaLoader2.prototype._parseLibImageChild = function(image, el) {
    switch (el.nodeName) {
      case "init_from":
        image.init_from = el.textContent;
        break;
      default:
        this.log("Skipped unknown image property " + el.nodeName + ".", ColladaLoader2.messageInfo);
    }
  };

  ColladaLoader2.prototype._parseLibScene = function(el) {
    return this.log("Parsing scene.", ColladaLoader2.messageTrace);
  };

  ColladaLoader2.prototype._parseLibAnimation = function(el) {
    return this.log("Parsing animation.", ColladaLoader2.messageTrace);
  };

  ColladaLoader2.prototype._resolveLinks = function() {
    var effect, id, material, _ref, _ref1;
    _ref = this.file.dae.libEffects;
    for (id in _ref) {
      effect = _ref[id];
      effect.link(this.file, this.log);
    }
    _ref1 = this.file.dae.libMaterials;
    for (id in _ref1) {
      material = _ref1[id];
      material.link(this.file, this.log);
    }
  };

  return ColladaLoader2;

})();
